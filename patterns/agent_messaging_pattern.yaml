name: agent_messaging_pattern
type: orchestration_pattern
version: 1.0.0
description: |
  Implements inter-agent messaging patterns through orchestration.
  Replaces hardcoded direct_message and broadcast logic from agent service.
author: ksi-system
extends: null

metadata:
  tags:
    - messaging
    - agent-communication
    - routing
  capabilities_required:
    - agent:send_message
    - agent:list
    - message:publish

# Message routing transformers
transformers:
  # Direct message routing
  - source: "message:send_direct"
    target: "agent:send_message"
    mapping:
      agent_id: "{{data.to}}"
      message:
        role: "assistant"
        content: "{{data.content}}"
        metadata:
          from: "{{data.from}}"
          type: "direct_message"
          timestamp: "{{_timestamp}}"

  # Broadcast message routing
  - source: "message:broadcast"
    target: "message:broadcast_impl"
    async: true
    implementation: |
      # Get all active agents
      agents = await emit("agent:list", {"status": "active"})
      
      # Send to each agent except sender
      for agent in agents.agents:
        if agent.agent_id != data.from:
          await emit("agent:send_message", {
            "agent_id": agent.agent_id,
            "message": {
              "role": "assistant",
              "content": data.content,
              "metadata": {
                "from": data.from,
                "type": "broadcast",
                "timestamp": _timestamp
              }
            }
          })

  # Selective broadcast (by criteria)
  - source: "message:multicast"
    target: "message:multicast_impl"
    async: true
    implementation: |
      # Apply filters to find target agents
      targets = await emit("agent:list", data.filters or {})
      
      # Send to matching agents
      for agent in targets.agents:
        if agent.agent_id != data.from:
          await emit("agent:send_message", {
            "agent_id": agent.agent_id,
            "message": {
              "role": "assistant", 
              "content": data.content,
              "metadata": {
                "from": data.from,
                "type": "multicast",
                "group": data.group,
                "timestamp": _timestamp
              }
            }
          })

# Message patterns
orchestration_logic:
  patterns:
    direct_message:
      description: "Send message to specific agent"
      usage: |
        EMIT "message:send_direct" WITH:
          from: sender_agent_id
          to: target_agent_id
          content: message_content

    broadcast_all:
      description: "Broadcast to all agents"
      usage: |
        EMIT "message:broadcast" WITH:
          from: sender_agent_id
          content: message_content

    multicast_group:
      description: "Send to agents matching criteria"
      usage: |
        EMIT "message:multicast" WITH:
          from: sender_agent_id
          content: message_content
          filters:
            profile: "worker"
            status: "ready"

    reply_to_sender:
      description: "Reply back to message sender"
      usage: |
        WHEN receiving message WITH metadata.from:
          EMIT "message:send_direct" WITH:
            from: my_agent_id
            to: metadata.from
            content: reply_content

# Routing strategies
routing:
  strategies:
    round_robin:
      description: "Distribute messages round-robin among targets"
      
    least_loaded:
      description: "Route to agent with smallest message queue"
      
    capability_based:
      description: "Route based on agent capabilities"
      
    affinity:
      description: "Route to previously successful agent"

variables:
  default_role: "assistant"
  max_broadcast_targets: 100
  message_timeout: 300  # seconds

# Usage examples
examples:
  - name: "Direct message"
    event: |
      {
        "event": "message:send_direct",
        "data": {
          "from": "coordinator_123",
          "to": "worker_456",
          "content": "Please process this data: {\"id\": 123}"
        }
      }

  - name: "Broadcast announcement"
    event: |
      {
        "event": "message:broadcast",
        "data": {
          "from": "system",
          "content": "System maintenance in 5 minutes"
        }
      }

  - name: "Multicast to workers"
    event: |
      {
        "event": "message:multicast",
        "data": {
          "from": "coordinator_123",
          "content": "New tasks available",
          "filters": {
            "profile": "worker",
            "status": "ready"
          },
          "group": "task_notification"
        }
      }