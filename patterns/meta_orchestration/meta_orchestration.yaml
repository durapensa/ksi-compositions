name: meta_orchestration_pattern
type: pattern
version: 1.0.0
description: "Orchestrators that manage and optimize other orchestrators"
author: ksi_meta_orchestration
category: meta_orchestration

metadata:
  tags:
    - meta-orchestration
    - orchestrator-management
    - system-optimization
    - hierarchical-control
  use_cases:
    - "Managing multiple orchestration strategies"
    - "Optimizing system-wide orchestration"
    - "Hierarchical orchestration control"
  required_events:
    - orchestration:start
    - orchestration:query
    - agent:list
    - agent:spawn
    - monitor:get_status
    - composition:discover
    - composition:fork
    - evaluation:prompt
    - state:set
    - state:get

pattern_instructions: |
  ## Meta-Orchestration Pattern
  
  Use this pattern to create orchestrators that manage other orchestrators,
  optimizing system-wide orchestration strategies and coordinating complex
  multi-level agent hierarchies.
  
  ### Core Pattern:
  ```
  1. Monitor orchestration landscape
  2. Analyze orchestration effectiveness
  3. Identify optimization opportunities
  4. Spawn/modify orchestrators as needed
  5. Coordinate between orchestrators
  6. Optimize system-wide performance
  ```
  
  ### Implementation:
  
  **Step 1: Monitor Orchestration Landscape**
  {"event": "monitor:get_status", "data": {
    "include_agents": true,
    "include_orchestrations": true,
    "agent_types": ["orchestrator"]
  }}
  
  **Step 2: Analyze Orchestration Effectiveness**
  {"event": "orchestration:query", "data": {
    "query_type": "performance_metrics",
    "time_range": "last_hour",
    "include_success_rates": true
  }}
  
  **Step 3: Discover Orchestration Patterns**
  {"event": "composition:discover", "data": {
    "type": "orchestration",
    "tags": ["orchestration", "patterns"],
    "metadata_filters": {"performance_tier": "high"}
  }}
  
  **Step 4: Spawn Specialized Orchestrators**
  {"event": "agent:spawn", "data": {
    "profile": "optimal_orchestrator_profile",
    "context": {
      "orchestration_domain": "{{target_domain}}",
      "performance_requirements": "{{requirements}}",
      "resource_constraints": "{{constraints}}"
    }
  }}
  
  **Step 5: Coordinate Orchestrator Network**
  {"event": "orchestration:start", "data": {
    "pattern": "orchestrator_coordination",
    "vars": {
      "orchestrator_ids": ["{{orchestrator_list}}"],
      "coordination_strategy": "hierarchical",
      "resource_allocation": "{{allocation_plan}}"
    }
  }}
  
  **Step 6: Optimize System Performance**
  {"event": "state:set", "data": {
    "namespace": "meta_orchestration",
    "key": "system_optimization_{{timestamp}}",
    "value": {
      "optimization_type": "{{optimization_type}}",
      "orchestrators_modified": "{{modified_count}}",
      "performance_improvement": "{{improvement_metrics}}",
      "resource_efficiency": "{{efficiency_metrics}}"
    }
  }}
  
  ### Meta-Orchestration Strategies:
  
  **Hierarchical Orchestration:**
  - Top-level meta-orchestrators manage domains
  - Mid-level orchestrators manage specific areas
  - Task-level orchestrators execute specific workflows
  
  **Adaptive Orchestration:**
  - Monitor system load and performance
  - Dynamically adjust orchestration strategies
  - Scale orchestrator network based on demand
  
  **Specialized Orchestration:**
  - Create domain-specific orchestrators
  - Optimize for specific task types
  - Develop expertise in particular areas
  
  **Collaborative Orchestration:**
  - Coordinate between multiple orchestrators
  - Share resources and capabilities
  - Avoid duplication and conflicts
  
  ### Advanced Meta-Orchestration:
  
  **Orchestrator Evolution:**
  - Analyze orchestrator performance patterns
  - Evolve orchestrator profiles based on effectiveness
  - Create new orchestration strategies
  
  **Resource Optimization:**
  - Monitor resource usage across orchestrators
  - Optimize resource allocation
  - Prevent resource conflicts
  
  **Performance Prediction:**
  - Predict orchestration performance
  - Preemptively adjust strategies
  - Optimize for anticipated workloads
  
  **Emergency Orchestration:**
  - Detect system failures or bottlenecks
  - Deploy emergency orchestration strategies
  - Coordinate system recovery

examples:
  - name: "Domain orchestrator management"
    description: "Meta-orchestrator manages specialized domain orchestrators"
    implementation: |
      # Monitor domain orchestrators
      {"event": "agent:list", "data": {
        "filters": {"profile_type": "domain_orchestrator"},
        "include_performance": true
      }}
      
      # Analyze domain performance
      {"event": "orchestration:query", "data": {
        "query_type": "domain_performance",
        "domains": ["research", "analysis", "synthesis"],
        "metrics": ["success_rate", "efficiency", "resource_usage"]
      }}
      
      # Spawn new domain orchestrator if needed
      {"event": "agent:spawn", "data": {
        "profile": "domain/research/research_orchestrator",
        "context": {
          "domain": "research",
          "specialization": "literature_review",
          "resource_allocation": "high_priority"
        }
      }}

  - name: "Load balancing orchestration"
    description: "Meta-orchestrator balances load across orchestrators"
    implementation: |
      # Monitor system load
      {"event": "monitor:get_status", "data": {
        "include_performance": true,
        "include_resource_usage": true
      }}
      
      # Analyze load patterns
      {"event": "orchestration:query", "data": {
        "query_type": "load_analysis",
        "time_range": "last_30_minutes",
        "include_predictions": true
      }}
      
      # Adjust orchestrator allocation
      {"event": "orchestration:start", "data": {
        "pattern": "load_balancing",
        "vars": {
          "high_load_areas": ["{{high_load_domains}}"],
          "available_resources": "{{available_capacity}}",
          "rebalancing_strategy": "gradual_migration"
        }
      }}

  - name: "System optimization orchestration"
    description: "Meta-orchestrator optimizes overall system performance"
    implementation: |
      # Get system performance metrics
      {"event": "state:get", "data": {
        "namespace": "system_metrics",
        "key": "overall_performance"
      }}
      
      # Identify optimization opportunities
      {"event": "orchestration:query", "data": {
        "query_type": "optimization_opportunities",
        "analysis_depth": "comprehensive",
        "include_predictions": true
      }}
      
      # Implement system-wide optimizations
      {"event": "composition:fork", "data": {
        "parent": "system_orchestration_strategy",
        "name": "optimized_system_strategy_{{timestamp}}",
        "reason": "System-wide performance optimization"
      }}

  - name: "Emergency response orchestration"
    description: "Meta-orchestrator coordinates emergency response"
    implementation: |
      # Detect system issues
      {"event": "monitor:get_status", "data": {
        "include_alerts": true,
        "alert_levels": ["warning", "critical"]
      }}
      
      # Coordinate emergency response
      {"event": "orchestration:start", "data": {
        "pattern": "emergency_response",
        "vars": {
          "emergency_type": "{{emergency_type}}",
          "affected_systems": ["{{affected_systems}}"],
          "response_priority": "immediate"
        }
      }}
      
      # Deploy emergency orchestrators
      {"event": "agent:spawn", "data": {
        "profile": "emergency/system_recovery_orchestrator",
        "context": {
          "emergency_type": "{{emergency_type}}",
          "recovery_strategy": "{{recovery_strategy}}",
          "authority_level": "emergency_override"
        }
      }}