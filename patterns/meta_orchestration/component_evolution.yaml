name: component_evolution_pattern
type: pattern
version: 1.0.0
description: "Evolve composition components through evaluation feedback and testing"
author: ksi_meta_orchestration
category: meta_orchestration

metadata:
  tags:
    - meta-orchestration
    - component-evolution
    - self-improvement
    - evaluation-driven
  use_cases:
    - "Improving underperforming components"
    - "Automated component optimization"
    - "Continuous system improvement"
  required_events:
    - composition:fork
    - composition:save
    - evaluation:prompt
    - monitor:get_events
    - state:set

pattern_instructions: |
  ## Component Evolution Pattern
  
  Use this pattern to systematically improve composition components through 
  evaluation feedback and iterative testing.
  
  ### Core Pattern:
  ```
  1. Identify component for improvement
  2. Fork component for safe experimentation
  3. Test current performance
  4. Analyze feedback and modify
  5. Test improvement
  6. Deploy if better
  ```
  
  ### Implementation:
  
  **Step 1: Identify Component**
  {"event": "monitor:get_events", "data": {
    "event_patterns": ["evaluation:*"],
    "limit": 100,
    "include_analysis": true
  }}
  
  **Step 2: Fork Component**
  {"event": "composition:fork", "data": {
    "parent": "component_name",
    "name": "component_name_evolution_{{timestamp}}",
    "reason": "Performance improvement experiment"
  }}
  
  **Step 3: Test Current Performance**
  {"event": "evaluation:prompt", "data": {
    "composition": "component_name",
    "test_suite": "performance_baseline",
    "variables": {"iteration": "baseline"}
  }}
  
  **Step 4: Analyze and Modify**
  # This step involves agent intelligence to analyze evaluation results
  # and modify the forked component based on feedback
  
  **Step 5: Test Improvement**
  {"event": "evaluation:prompt", "data": {
    "composition": "component_name_evolution_{{timestamp}}",
    "test_suite": "performance_baseline",
    "variables": {"iteration": "improved"}
  }}
  
  **Step 6: Deploy if Better**
  {"event": "composition:save", "data": {
    "composition": "improved_component_data",
    "overwrite": true,
    "git_message": "Evolved component based on evaluation feedback"
  }}
  
  **Step 7: Track Evolution**
  {"event": "state:set", "data": {
    "namespace": "component_evolution",
    "key": "{{component_name}}_evolution_history",
    "value": {
      "evolution_timestamp": "{{timestamp}}",
      "baseline_score": "{{baseline_score}}",
      "improved_score": "{{improved_score}}",
      "improvement_percentage": "{{improvement}}",
      "orchestrator": "{{orchestrator_id}}"
    }
  }}
  
  ### Advanced Evolution Strategies:
  
  **Multi-Variant Testing:**
  - Create multiple evolutionary branches
  - Test each variant against different test suites
  - Select the best performing variant
  
  **Genetic Algorithm Approach:**
  - Create multiple random variations
  - Evaluate fitness of each variation
  - Combine successful traits from best variants
  
  **Feedback Loop Integration:**
  - Monitor real-world usage patterns
  - Collect user feedback on component effectiveness
  - Evolve based on actual usage data
  
  **Rollback Capability:**
  - Maintain version history
  - Monitor post-deployment performance
  - Rollback if evolution degrades performance

examples:
  - name: "Improve reasoning component"
    description: "Evolve a logical reasoning component based on evaluation feedback"
    implementation: |
      # Fork the reasoning component
      {"event": "composition:fork", "data": {
        "parent": "reasoning/logical_chain",
        "name": "reasoning/logical_chain_evolution_20250716",
        "reason": "Improving logical reasoning accuracy"
      }}
      
      # Test baseline performance
      {"event": "evaluation:prompt", "data": {
        "composition": "reasoning/logical_chain",
        "test_suite": "logical_reasoning_accuracy",
        "variables": {"test_type": "baseline"}
      }}
      
      # After analysis and modification, test improvement
      {"event": "evaluation:prompt", "data": {
        "composition": "reasoning/logical_chain_evolution_20250716",
        "test_suite": "logical_reasoning_accuracy",
        "variables": {"test_type": "improved"}
      }}

  - name: "Optimize prompt component"
    description: "Evolve a prompt component for better task performance"
    implementation: |
      # Monitor current performance
      {"event": "monitor:get_events", "data": {
        "event_patterns": ["evaluation:*"],
        "filters": {"composition": "prompts/task_execution"},
        "limit": 50
      }}
      
      # Fork for improvement
      {"event": "composition:fork", "data": {
        "parent": "prompts/task_execution",
        "name": "prompts/task_execution_optimized",
        "reason": "Task completion rate improvement"
      }}
      
      # Test and deploy improved version
      {"event": "evaluation:prompt", "data": {
        "composition": "prompts/task_execution_optimized",
        "test_suite": "task_completion_metrics"
      }}