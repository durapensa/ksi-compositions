name: level0_simple_coordination
type: orchestration
version: 1.0.0
description: |
  Level 0 test: Simple coordination using natural language instructions.
  No DSL constructs - pure natural language orchestration to establish baseline.
  Tests if agents can coordinate tasks through clear verbal instructions.
author: ksi_system
timestamp: 2025-01-18T00:00:00Z

agents:
  # Natural language coordinator (orchestrator that can interpret orchestration_logic)
  coordinator:
    component: "components/core/system_orchestrator"
    vars:
      agent_id: "natural_coordinator"
      pattern_name: "level0_simple_coordination"
      prompt: |
        You coordinate two pre-spawned worker agents: worker_a and worker_b.
        
        ## MANDATORY: Start with:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "coordinator_ready"}}
        
        ## EXECUTE THIS COORDINATION NOW:
        
        STEP 1: Send message to worker_a asking for a random number between 1 and 10:
        {"event": "message:send", "data": {"to": "worker_a", "content": "Please generate a random number between 1 and 10"}}
        
        STEP 2: When worker_a responds, send message to worker_b to double that number:
        {"event": "message:send", "data": {"to": "worker_b", "content": "Please double this number: [number_from_worker_a]"}}
        
        STEP 3: When worker_b responds, report the final results:
        {"event": "orchestration:track", "data": {"phase": "complete", "original": N, "doubled": M}}
        
        Begin execution immediately.

  worker_a:
    component: "components/core/base_agent"
    vars:
      agent_id: "worker_a"
      prompt: |
        You are Worker A. You respond to messages from the coordinator.
        
        ## MANDATORY: Start with:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "worker_a_ready"}}
        
        When you receive a message asking for a random number:
        1. Pick a random number between 1 and 10
        2. Send response back to coordinator:
        {"event": "message:send", "data": {"to": "coordinator", "content": "I generated the number: [your_number]"}}
        3. Track your result:
        {"event": "state:entity:create", "data": {"type": "computation", "id": "worker_a_result", "properties": {"value": N}}}

  worker_b:
    component: "components/core/base_agent"
    vars:
      agent_id: "worker_b"
      prompt: |
        You are Worker B. You respond to messages from the coordinator.
        
        ## MANDATORY: Start with:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "worker_b_ready"}}
        
        When you receive a message asking to double a number:
        1. Extract the number from the message
        2. Multiply it by 2
        3. Send response back to coordinator:
        {"event": "message:send", "data": {"to": "coordinator", "content": "I doubled [original_number] to get: [doubled_number]"}}
        4. Track your result:
        {"event": "state:entity:create", "data": {"type": "computation", "id": "worker_b_result", "properties": {"input": N, "output": M}}}

# Measurement observer
  observer:
    component: "components/core/base_agent"
    vars:
      agent_id: "test_observer"
      prompt: |
        You observe and measure the coordination test.
        
        ## MANDATORY: Start with:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "observer_ready"}}
        
        Track:
        1. Did the coordinator successfully orchestrate the task?
        2. Did workers understand their instructions?
        3. Were the computations correct?
        4. How many message exchanges were needed?
        
        ## MANDATORY: Report measurement:
        {"event": "state:entity:create", "data": {"type": "test_result", "id": "level0_coordination", "properties": {"success": true/false, "message_count": N, "errors": [], "coordination_quality": "rating"}}}

# Message routing for inter-agent communication
routing:
  rules:
    - pattern: "message:send"
      from: "coordinator"
      to: "worker_a"
    - pattern: "message:send"
      from: "coordinator"
      to: "worker_b"
    - pattern: "message:send"
      from: "worker_a"
      to: "coordinator"  
    - pattern: "message:send"
      from: "worker_b"
      to: "coordinator"

variables:
  test_name: "Natural Language Coordination"
  test_level: 0
  expected_duration: "2-3 minutes"

# Orchestration logic to trigger execution
orchestration_logic:
  description: |
    Natural language coordination test - baseline for DSL comparison.
    Tests multi-agent coordination using only natural language instructions.
    
  strategy: |
    WHEN orchestration_starts:
      INITIALIZE natural_coordination_test
      ACTIVATE all_agents
      TRIGGER coordinator TO begin_coordination_sequence
      
    TRACK coordination_flow:
      - coordinator_requests_number
      - worker_a_generates_number  
      - coordinator_requests_doubling
      - worker_b_doubles_number
      - coordinator_reports_results
      
    MEASURE baseline_metrics:
      - natural_language_understanding
      - coordination_effectiveness
      - communication_clarity

metadata:
  test_category: pre_dsl_baseline
  skills_tested:
    - natural_language_understanding
    - task_coordination
    - sequential_execution
  success_criteria:
    - correct_task_completion
    - clear_communication
    - proper_event_emission