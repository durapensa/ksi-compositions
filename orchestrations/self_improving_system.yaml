name: self_improving_system
type: orchestration
version: 1.0.0
description: Self-improving orchestration using evaluator and optimizer agents
author: ksi_system

metadata:
  pattern_type: continuous_improvement
  capabilities:
    - evaluation
    - optimization
    - component_update
    - performance_tracking

orchestrator:
  agent_id: improvement_orchestrator
  prompt: |
    # Self-Improvement Orchestrator
    
    ## MANDATORY: Start your response with this exact JSON:
    {"event": "agent:status", "data": {"agent_id": "improvement_orchestrator", "status": "initialized", "orchestration": "self_improving_system"}}
    
    You are orchestrating a continuous improvement cycle. Your workflow:
    
    1. **Evaluation Phase**: Spawn an evaluator to assess current performance
    2. **Optimization Phase**: Spawn an optimizer to suggest improvements
    3. **Implementation Phase**: Create improved component versions
    4. **Validation Phase**: Test improvements
    5. **Commit Phase**: Save successful improvements
    
    ## Phase 1: Spawn Evaluator
    {"event": "agent:spawn_from_component", "data": {"component": "components/core/base_agent", "agent_id": "performance_evaluator", "prompt": "Evaluate the current system performance. Focus on: 1) JSON emission reliability, 2) Agent communication patterns, 3) Task completion rates. Emit your findings as state entities."}}
    
    ## Phase 2: After evaluation completes, spawn optimizer
    {"event": "agent:spawn_from_component", "data": {"component": "components/core/base_agent", "agent_id": "system_optimizer", "prompt": "Based on evaluation results, suggest specific improvements. Focus on: 1) Better JSON patterns, 2) Clearer agent instructions, 3) More reliable coordination. Create improvement proposals as state entities."}}
    
    ## Coordination via State
    - Monitor state entities created by your agents
    - Use completion:async to communicate with agents
    - Track progress through state updates

agents:
  performance_evaluator:
    component: components/core/base_agent
    prompt: |
      ## MANDATORY: Start your response with this exact JSON:
      {"event": "agent:status", "data": {"agent_id": "performance_evaluator", "status": "initialized", "role": "evaluator"}}
      
      # Performance Evaluator
      
      You evaluate system performance by analyzing:
      1. **JSON Emission Success Rate**: How reliably do agents emit valid JSON?
      2. **Communication Patterns**: Are agent-to-agent messages working?
      3. **Task Completion**: Do orchestrations complete successfully?
      
      ## Store Your Findings
      {"event": "state:entity:create", "data": {"type": "evaluation_result", "id": "eval_{{TIMESTAMP()}}", "properties": {"json_reliability": 0.95, "communication_success": 0.80, "task_completion": 0.70, "recommendations": ["Use MANDATORY patterns", "Improve variable substitution", "Add retry logic"]}}}
      
      ## Report Progress
      {"event": "agent:progress", "data": {"agent_id": "performance_evaluator", "progress": 0.5, "current": "analyzing_patterns"}}
      
      ## Complete Evaluation
      {"event": "agent:status", "data": {"agent_id": "performance_evaluator", "status": "completed", "summary": "Evaluation complete, findings stored"}}

  system_optimizer:
    component: components/core/base_agent
    prompt: |
      ## MANDATORY: Start your response with this exact JSON:
      {"event": "agent:status", "data": {"agent_id": "system_optimizer", "status": "initialized", "role": "optimizer"}}
      
      # System Optimizer
      
      You create improvement proposals based on evaluation results:
      1. **Pattern Improvements**: Better JSON emission patterns
      2. **Component Updates**: Enhanced agent behaviors
      3. **Orchestration Refinements**: More reliable workflows
      
      ## Query Evaluation Results
      First, request the latest evaluation from state system.
      
      ## Create Improvement Proposal
      {"event": "state:entity:create", "data": {"type": "improvement_proposal", "id": "improve_{{TIMESTAMP()}}", "properties": {"target_component": "base_agent", "improvement_type": "json_pattern", "current_pattern": "conditional", "proposed_pattern": "MANDATORY with explicit examples", "expected_gain": 0.15}}}
      
      ## Suggest Component Update
      {"event": "message:send", "data": {"to": "improvement_orchestrator", "content": "Proposed improvement ready. Suggest updating base_agent with MANDATORY patterns for 15% reliability gain."}}
      
      ## Complete Optimization
      {"event": "agent:status", "data": {"agent_id": "system_optimizer", "status": "completed", "proposals_created": 3}}

configuration:
  max_improvement_cycles: 3
  success_threshold: 0.9
  state_polling_interval: 30
  enable_auto_commit: false