name: test_mipro_optimization
type: orchestration
version: 1.0.0
description: Test orchestration for MIPRO Bayesian optimization
author: claude
timestamp: 2025-07-16 08:30:00+00:00
agents:
  test_orchestrator:
    component: components/core/system_orchestrator
    vars:
      pattern_name: test_mipro_optimization
    prompt: 'You are a test orchestrator for the MIPRO optimization pattern.


      Your task:

      1. Spawn a MIPRO orchestrator with test parameters

      2. Monitor its progress

      3. Collect and report results


      Follow the test strategy in orchestration_logic.

      '
variables:
  optimization_task: Write a haiku about coding
  prompt: Write a haiku about coding. Be creative and insightful.
  evaluation_suite: basic_effectiveness
  bootstrap_runs: 3
  proposal_count: 5
  optimization_trials: 5
  batch_size: 2
orchestration_logic:
  strategy: "## Test MIPRO Optimization\n\nTRACK {\n  event: \"test_started\",\n \
    \ task: optimization_task,\n  timestamp: NOW()\n}\n\n# Spawn MIPRO orchestrator\n\
    SPAWN {\n  component: \"components/core/system_orchestrator\",\n  vars: {\n  \
    \  prompt: |\n      You are orchestrating a MIPRO Bayesian optimization process.\n\
    \      \n      Follow the mipro_bayesian_optimization pattern to optimize this\
    \ prompt:\n      Task: {{optimization_task}}\n      Initial prompt: {{initial_prompt}}\n\
    \      \n      Use these reduced parameters for testing:\n      - Bootstrap runs:\
    \ {{bootstrap_runs}}\n      - Proposals: {{proposal_count}}\n      - Trials: {{optimization_trials}}\n\
    \      - Batch size: {{batch_size}}\n      \n      Emit events to track progress:\n\
    \      - orchestration:track for phase transitions\n      - state:set for storing\
    \ optimization state\n      - evaluation:prompt for testing prompts\n    },\n\
    \    pattern: \"mipro_bayesian_optimization\",\n    pattern_vars: {\n      task_description:\
    \ optimization_task,\n      base_prompt: initial_prompt,\n      test_suite: evaluation_suite,\n\
    \      num_bootstrap_runs: bootstrap_runs,\n      num_proposals: proposal_count,\n\
    \      num_trials: optimization_trials,\n      minibatch_size: batch_size\n  \
    \  }\n  }\n} AS mipro_orchestrator\n\n# Monitor optimization progress\nSUBSCRIBE\
    \ {\n  patterns: [\"orchestration:track\", \"evaluation:*\", \"agent:message\"\
    ],\n  from: mipro_orchestrator\n}\n\n# Wait for completion with generous timeout\n\
    AWAIT {\n  from: mipro_orchestrator,\n  event_pattern: \"orchestration:track\"\
    ,\n  filter: \"data.phase == 'complete'\",\n  timeout: 600  # 10 minutes\n} AS\
    \ completion\n\n# Retrieve final results\nEVENT state:get {\n  key: \"mipro_optimization_{{optimization_task\
    \ | slugify}}\"\n} AS final_state\n\nTRACK {\n  event: \"test_completed\",\n \
    \ task: optimization_task,\n  prompt: initial_prompt,\n  optimized_prompt: completion.optimized_prompt,\n\
    \  improvement: completion.improvement,\n  total_duration: NOW() - START_TIME\n\
    }\n\nTERMINATE mipro_orchestrator\n"
metadata:
  purpose: testing
  tests:
  - mipro_bayesian_optimization
