name: level0_simple_coordination
type: orchestration
version: 2.0.0
description: |
  Level 0 test: Simple coordination using natural language instructions.
  No DSL constructs - pure natural language orchestration to establish baseline.
  Tests if agents can coordinate tasks through clear verbal instructions.
author: ksi_system
timestamp: 2025-01-18T00:00:00Z

# Documentation of coordination pattern (emerges from agent behavior, not system control)
# This test demonstrates natural language coordination without system-imposed routing

agents:
  coordinator:
    component: "components/core/orchestration_coordinator"
    prompt: |
      You coordinate worker agents to complete a simple computational task.
      
      ## EXECUTE THIS COORDINATION NOW:
      STEP 1: Send message to worker_a asking for a random number between 1 and 10:
      {"event": "message:send", "data": {"to": "worker_a", "content": "Please generate a random number between 1 and 10"}}
      
      STEP 2: When worker_a responds, send message to worker_b to double that number:
      {"event": "message:send", "data": {"to": "worker_b", "content": "Please double this number: [number_from_worker_a]"}}
      
      STEP 3: When worker_b responds, report the final results:
      {"event": "orchestration:track", "data": {"phase": "complete", "original": N, "doubled": M}}
      
      Begin execution immediately.
    vars:
      agent_id: "natural_coordinator"
      orchestration_name: "level0_simple_coordination"

  worker_a:
    component: "components/core/base_agent"
    prompt: |
      You are a worker agent responding to coordinator instructions.
      
      ## MANDATORY: Start with:
      {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "worker_ready"}}
      
      When you receive task instructions:
      1. Execute the requested computation
      2. Report results clearly to the coordinator
      3. Track your computation with state events
    vars:
      agent_id: "worker_a"

  worker_b:
    component: "components/core/base_agent"
    prompt: |
      You are a worker agent responding to coordinator instructions.
      
      ## MANDATORY: Start with:
      {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "worker_ready"}}
      
      When you receive task instructions:
      1. Execute the requested computation
      2. Report results clearly to the coordinator
      3. Track your computation with state events
    vars:
      agent_id: "worker_b"

  observer:
    component: "components/core/base_agent"
    prompt: |
      You observe and measure coordination effectiveness.
      
      ## MANDATORY: Start with:
      {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "observer_ready"}}
      
      Track:
      1. Did the coordinator successfully orchestrate the task?
      2. Did workers understand their instructions?
      3. Were the computations correct?
      4. How many message exchanges were needed?
      
      ## MANDATORY: Report measurement:
      {"event": "state:entity:create", "data": {"type": "test_result", "id": "level0_coordination", "properties": {"success": true/false, "message_count": N, "errors": [], "coordination_quality": "rating"}}}
    vars:
      agent_id: "test_observer"

variables:
  test_name: "Natural Language Coordination"
  test_level: 0
  expected_duration: "2-3 minutes"

routing:
  rules:
    - pattern: "message:send"
      from: "coordinator"
      to: "worker_a"
    - pattern: "message:send"
      from: "coordinator"
      to: "worker_b"

metadata:
  test_category: pre_dsl_baseline
  skills_tested:
    - natural_language_understanding
    - task_coordination
    - sequential_execution
  success_criteria:
    - correct_task_completion
    - clear_communication
    - proper_event_emission