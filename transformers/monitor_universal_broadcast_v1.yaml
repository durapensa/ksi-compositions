name: monitor_universal_broadcast
description: Universal event transformer for broadcasting all events to subscribed clients
metadata:
  category: monitor
  pattern_type: universal_broadcast
  author: ksi
  version: 1.0.0
  created: 2025-01-24
  migration_source: ksi_daemon/core/monitor.py:910-940

# Universal transformer that matches ALL events and broadcasts them
transformers:
  # Main broadcasting transformer - handles ALL events except excluded ones
  - source: "*"
    target: "monitor:broadcast_event"
    condition: "is_event_handled(source_event) and not (source_event.startswith('transport:') or source_event == 'monitor:subscribe' or source_event == 'monitor:broadcast_event')"
    mapping:
      event_name: "{{_ksi_context.event}}"
      event_data: "{{$}}"
      broadcast_metadata:
        originator_agent: "{{_ksi_context._agent_id|system}}"
        timestamp: "{{timestamp_utc()}}"
        subscription_required: true
    description: "Universal broadcast transformer - routes all events to broadcast handler"
    async: true

usage_notes: |
  This transformer replaces the universal broadcast handler in monitor.py:910-940.
  
  Key behaviors:
  1. Matches ALL events with source pattern "*"
  2. VALIDATES events are handled by real handlers/transformers using is_event_handled()
  3. Excludes transport events and monitor:subscribe to prevent loops  
  4. Routes to special monitor:broadcast_event for handling
  5. Preserves originator and timestamp metadata
  6. Uses condition to filter unwanted events and bogus events
  
  The validation prevents broadcasting of bogus events like routing:clear_all_rules
  that have no real handlers. Only events with legitimate Python handlers or 
  transformers (excluding this universal broadcaster) are broadcast to clients.
  
  The actual broadcasting logic remains in Python as a monitor:broadcast_event
  handler since it requires client subscription state management.
  
  Breaking Change: Replaces @event_handler("*") in monitor.py completely.