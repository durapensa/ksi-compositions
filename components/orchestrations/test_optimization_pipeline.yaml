name: test_optimization_pipeline
description: Test orchestration demonstrating complete optimization pipeline flow
version: 1.0.0
metadata:
  author: ksi
  created_at: 2025-07-20
  purpose: Demonstrate DSPy → Judge → Update → Git pipeline

configuration:
  timeout: 600  # 10 minutes for complete test
  event_subscription_level: 2  # See nested agent events
  error_subscription_level: -1  # All errors

variables:
  test_component: "components/behaviors/communication/mandatory_json"
  test_metric: "validate_json_emission"

phases:
  - name: start_optimization
    type: event_emission
    config:
      event: optimization:async
      data:
        target: "{{test_component}}"
        framework: dspy
        metric: "{{test_metric}}"
        config:
          auto: "light"
          verbose: true
    outputs:
      - optimization_id
      - optimization_status

  - name: wait_for_optimization
    type: wait_condition
    depends_on: [start_optimization]
    config:
      condition_type: event_pattern
      event_pattern: "optimization:progress"
      match_data:
        optimization_id: "{{optimization_id}}"
        status: "completed|failed"
      timeout: 480  # 8 minutes max
      poll_interval: 30
    outputs:
      - final_status

  - name: get_results
    type: event_emission
    depends_on: [wait_for_optimization]
    config:
      event: optimization:status
      data:
        optimization_id: "{{optimization_id}}"
    outputs:
      - optimization_results

  - name: handle_results
    type: orchestration_spawn
    depends_on: [get_results]
    config:
      pattern: orchestrations/optimization_result_pipeline
      variables:
        optimization_id: "{{optimization_id}}"
        component_name: "{{test_component}}"
        framework: "dspy"
        original_score: "{{optimization_results.original_score|default:0.0}}"
        optimized_score: "{{optimization_results.optimized_score|default:0.0}}"
        improvement: "{{optimization_results.improvement|default:0.0}}"
        status: "{{optimization_results.status}}"
        optimization_metadata: "{{optimization_results.metadata}}"
        optimization_config: 
          auto: "light"
          metric: "{{test_metric}}"
    outputs:
      - pipeline_result

  - name: report_outcome
    type: event_emission
    depends_on: [handle_results]
    config:
      event: message:send
      data:
        channel: "optimization_test"
        message: |
          Optimization Pipeline Test Complete:
          - Component: {{test_component}}
          - Optimization ID: {{optimization_id}}
          - Final Status: {{final_status}}
          - Pipeline Decision: {{pipeline_result.final_decision}}
          - Reasoning: {{pipeline_result.decision_reasoning}}

outputs:
  optimization_id: "{{optimization_id}}"
  final_decision: "{{pipeline_result.final_decision}}"
  complete_results: "{{optimization_results}}"