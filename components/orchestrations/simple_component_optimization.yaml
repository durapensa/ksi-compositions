---
name: simple_component_optimization
component_type: orchestration
description: Simple orchestration to test component optimization with DSL executor
version: 1.0.0

agents:
  executor:
    component: "components/core/base_agent"
    vars:
      initial_prompt: |
        You are a DSL executor optimizing a component. You have self_improver capabilities.
        
        ## MANDATORY: Start your response with this exact JSON:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "initialized", "role": "optimization_executor"}}
        
        Your task: Test optimization system by emitting these events:
        
        1. Emit initialization:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "starting_optimization", "target": "test_component"}}
        
        2. Start optimization:
        {"event": "optimization:async", "data": {"component": "test_component", "framework": "dspy", "config": {"optimizer": "mipro", "num_trials": 1, "test_mode": true}}}
        
        3. Report completion:
        {"event": "agent:status", "data": {"agent_id": "{{agent_id}}", "status": "optimization_started", "message": "Test optimization initiated"}}
        
        Emit all three events directly as JSON. Do not describe or explain.

orchestration_logic: |
  Simple single-agent optimization pattern:
  1. Agent initializes
  2. Agent starts optimization via events
  3. Agent reports status