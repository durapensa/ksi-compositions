name: agent_hierarchy_pattern
component_type: behavior
version: 1.0.0
description: |
  Implements agent hierarchy patterns and parent-child relationships.
  Provides DSL patterns for hierarchical coordination and task distribution.
author: ksi-system
extends: null

metadata:
  tags:
    - hierarchy
    - parent-child
    - coordination
    - task-distribution
  capabilities_required:
    - agent:send_message
    - agent:list
    - agent:status

# Hierarchy routing transformers
transformers:
  # Parent agent notification
  - name: "child_status_to_parent"
    source: "agent:status"
    target: "agent:send_message"
    condition: "_ksi_context.parent_agent_id exists"
    mapping:
      agent_id: "{{_ksi_context.parent_agent_id}}"
      message:
        role: "assistant"
        content: "Child agent status update: {{status}}"
        metadata:
          type: "child_status"
          child_agent_id: "{{agent_id}}"
          status: "{{status}}"
          timestamp: "{{_timestamp}}"
    description: "Forward child agent status updates to parent agents"

  # Child result aggregation
  - name: "child_result_to_parent"
    source: "agent:result"
    target: "agent:send_message"
    condition: "_ksi_context.parent_agent_id exists"
    mapping:
      agent_id: "{{_ksi_context.parent_agent_id}}"
      message:
        role: "assistant"
        content: "Child agent result: {{result}}"
        metadata:
          type: "child_result"
          child_agent_id: "{{agent_id}}"
          result: "{{result}}"
          timestamp: "{{_timestamp}}"
    description: "Forward child agent results to parent agents"

  # Parent task distribution
  - name: "parent_task_to_children"
    source: "agent:distribute_task"
    target: "agent:distribute_task_impl"
    async: true
    implementation: |
      # Get child agents for this parent
      children = await emit("agent:list", {
        "parent_agent_id": agent_id,
        "status": "ready"
      })
      
      # Distribute task to children
      for child in children.agents:
        await emit("agent:send_message", {
          "agent_id": child.agent_id,
          "message": {
            "role": "user",
            "content": data.task_content,
            "metadata": {
              "type": "parent_task",
              "parent_agent_id": agent_id,
              "task_id": data.task_id,
              "timestamp": _timestamp
            }
          }
        })
    description: "Distribute tasks from parent to child agents"

# Hierarchy patterns for agent DSL
orchestration_logic:
  patterns:
    parent_child_relationship:
      description: "Establish parent-child agent relationships"
      usage: |
        WHEN spawning child agent:
          SET _ksi_context.parent_agent_id = my_agent_id
          EMIT "agent:spawn" WITH:
            profile: child_profile
            context:
              parent_agent_id: my_agent_id

    delegate_to_children:
      description: "Distribute tasks across child agents"
      usage: |
        EMIT "agent:distribute_task" WITH:
          task_content: task_description
          task_id: unique_task_id
          distribution_strategy: "round_robin"

    aggregate_child_results:
      description: "Collect and process results from child agents"
      usage: |
        WHEN receiving message WITH metadata.type = "child_result":
          COLLECT result INTO results_buffer
          IF all_children_completed:
            PROCESS aggregated_results

    hierarchical_coordination:
      description: "Coordinate across hierarchy levels"
      usage: |
        # Parent coordinates multiple child teams
        EMIT "message:multicast" WITH:
          content: coordination_message
          filters:
            parent_agent_id: my_agent_id
            status: "ready"

# Hierarchy strategies
hierarchy:
  strategies:
    fan_out_fan_in:
      description: "Distribute work to children, aggregate results"
      pattern: |
        1. Parent receives complex task
        2. Split task into subtasks
        3. Assign subtasks to child agents
        4. Collect child results
        5. Synthesize final result

    cascade_coordination:
      description: "Sequential coordination through hierarchy levels"
      pattern: |
        1. Top-level agent makes decisions
        2. Middle-level agents coordinate teams
        3. Leaf agents execute tasks
        4. Results flow back up hierarchy

    adaptive_hierarchy:
      description: "Dynamic hierarchy based on task complexity"
      pattern: |
        1. Assess task complexity
        2. Determine optimal hierarchy depth
        3. Spawn appropriate agent structure
        4. Coordinate execution

variables:
  max_hierarchy_depth: 3
  child_timeout: 600  # seconds
  aggregation_strategy: "consensus"

# Usage examples
examples:
  - name: "Team coordination"
    pattern: |
      # Parent agent coordinates a team
      EMIT "agent:distribute_task" WITH:
        task_content: "Analyze quarterly sales data"
        task_id: "q4_analysis_2024"
        
      # Children report back
      WHEN message.metadata.type = "child_result":
        IF all_children_complete:
          SYNTHESIZE team_analysis_result

  - name: "Hierarchical decision making"
    pattern: |
      # Manager delegates to team leads
      FOR each department IN departments:
        EMIT "message:send_direct" WITH:
          to: department.lead_agent_id
          content: "Please provide department status"
          
      # Aggregate department reports
      COLLECT responses INTO department_status
      MAKE executive_decision BASED ON department_status